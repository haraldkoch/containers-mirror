name: Release

on:
  workflow_dispatch:
  pull_request:
    branches: ["main"]
  push:
    branches: ["main"]

env:
  IMAGE_REGISTRY: ghcr.io

jobs:
  changed-files:
    name: Get Changed Files
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.changed-files.outputs.all_changed_and_modified_files }}
      any_changed: ${{ steps.changed-clusters.outputs.any_changed }}
    steps:
      - name: Generate Token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2
        id: generate-token
        with:
          app_id: "${{ secrets.BOT_APP_ID }}"
          private_key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          token: "${{ steps.generate-token.outputs.token }}"

      - name: Get changed files
        id: changed-files
        uses: JJGadgets/tj-actions-changed-files@9200e69727eb73eb060652b19946b8a2fdfb654b
        with:
          files: apps/**
          dir_names_max_depth: 2
          dir_names: true
          escape_json: false
          json: true
          quotepath: false
          safe_output: false

      - name: List all changed files
        run: echo "${{ steps.changed-files.outputs.all_changed_and_modified_files }}"

  build:
    name: Build
    runs-on: ubuntu-latest
    if: ${{ needs.changed-clusters.outputs.any_changed == 'true' }}
    permissions:
      packages: write
      id-token: write
    needs: ["changed-files"]
    strategy:
      matrix:
        containers: ${{ fromJSON(needs.changed-files.outputs.matrix) }}
      max-parallel: 4
      fail-fast: false
    steps:
      - name: Generate Token
        uses: actions/create-github-app-token@d72941d797fd3113feb6b93fd0dec494b13a2547 # v1
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          token: "${{ steps.app-token.outputs.token }}"

      - name: Prepare
        id: prep
        run: |
          container_name=$(basename ${{ matrix.containers }})
          echo "container-name=${container_name}" >> "${GITHUB_OUTPUT}"

          container_image=$(head -1 ./apps/${container_name}/Dockerfile | sed 's/^FROM //')
          container_version=$(cut -d':' -f2 <<< "${container_image}")
          if [[ "${container_version}" == *sha256 ]]; then
              container_version=$(cut -d'@' -f1 <<< "${container_version}")
          fi
          echo "container-version=${container_version}" >> "${GITHUB_OUTPUT}"

          container_platform=$(cat ./apps/${container_name}/PLATFORM)
          echo "container-platform=${container_platform}" >> "${GITHUB_OUTPUT}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3

      - name: Build and Push
        uses: docker/build-push-action@14487ce63c7a62a4a324b0bfb37086795e31c6c1 # v6
        with:
          build-args: VERSION=${{ steps.prep.outputs.container-version }}
          context: .
          platforms: ${{ steps.prep.outputs.container-platform }}
          file: ./apps/${{ steps.prep.outputs.container-name }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.IMAGE_REGISTRY }}/${{ github.repository_owner }}/${{ steps.prep.outputs.container-name }}:${{ steps.prep.outputs.container-version }}

  release-status:
    needs: ["build"]
    name: Build Images Success
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Any jobs failed?
        if: ${{ contains(needs.*.result, 'failure') }}
        run: exit 1
      - name: All jobs passed or skipped
        if: ${{ !(contains(needs.*.result, 'failure')) }}
        run: echo "All jobs passed or skipped" && echo "${{ toJSON(needs.*.result) }}"
