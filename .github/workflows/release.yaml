name: Release

on:
  workflow_dispatch:
    inputs:
      app:
        type: string
        description: The name of the app to build
        required: true
      release:
        type: boolean
        description: Whether to release the app
        required: false
        default: false
  pull_request:
    branches: ["main"]
  push:
    branches: ["main"]

env:
  IMAGE_REGISTRY: ghcr.io

jobs:
  changed:
    name: Get Changed Files
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      apps: ${{ steps.apps.outputs.apps }}
    steps:
      - name: Generate Token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2
        id: generate-token
        with:
          app_id: "${{ secrets.BOT_APP_ID }}"
          private_key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          token: "${{ steps.generate-token.outputs.token }}"

      - name: Get Changed Files
        id: changed-dirs
        uses: tj-actions/changed-files@ed68ef82c095e0d48ec87eccea555d944a631a4c # v46.0.5
        with:
          dir_names: true
          dir_names_max_depth: '1'
          path: apps

      - name: List all changed files
        run: echo "${{ steps.changed-dirs.outputs.all_changed_and_modified_files }}"

      - name: Select Apps to Build
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        id: apps
        with:
          script: |
            const input =
              context.eventName === 'workflow_dispatch'
                ? '${{ inputs.app }}'
                : '${{ steps.changed-dirs.outputs.all_changed_and_modified_files }}';

            const appsToBuild = input.split(' ').filter(Boolean);
            const output = [];

            appsToBuild.forEach((app) => {
              output.push(app);
            });

            core.setOutput('apps', output);
            console.log('apps:', JSON.stringify(output, null, 2));
            core.summary.addHeading('Apps to build:').addList(appsToBuild).write();

  build:
    name: Build
    runs-on: ubuntu-latest
    if: ${{ needs.changed.outputs.apps != '[]' }}
    needs: ["changed"]
    permissions:
      packages: write
      id-token: write
    strategy:
      matrix:
        containers: ${{ fromJSON(needs.changed.outputs.apps) }}
      max-parallel: 4
      fail-fast: false
    steps:
      - name: Generate Token
        uses: actions/create-github-app-token@d72941d797fd3113feb6b93fd0dec494b13a2547 # v1
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          token: "${{ steps.app-token.outputs.token }}"

      - name: Prepare
        id: prep
        run: |
          container_name=$(basename ${{ matrix.containers }})
          echo "container-name=${container_name}" >> "${GITHUB_OUTPUT}"

          container_image=$(head -1 ./apps/${container_name}/Dockerfile | sed 's/^FROM //')
          container_version=$(cut -d':' -f2 <<< "${container_image}")
          if [[ "${container_version}" == *sha256 ]]; then
              container_version=$(cut -d'@' -f1 <<< "${container_version}")
          fi
          echo "container-version=${container_version}" >> "${GITHUB_OUTPUT}"

          container_platform=$(cat ./apps/${container_name}/PLATFORM)
          echo "container-platform=${container_platform}" >> "${GITHUB_OUTPUT}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3

      - name: Build and Push
        uses: docker/build-push-action@14487ce63c7a62a4a324b0bfb37086795e31c6c1 # v6
        with:
          build-args: VERSION=${{ steps.prep.outputs.container-version }}
          context: .
          platforms: ${{ steps.prep.outputs.container-platform }}
          file: ./apps/${{ steps.prep.outputs.container-name }}/Dockerfile
          push: ${{ github.event_name == 'workflow_dispatch' && inputs.release || github.event_name == 'push' }}
          tags: |
            ${{ env.IMAGE_REGISTRY }}/${{ github.repository_owner }}/${{ steps.prep.outputs.container-name }}:${{ steps.prep.outputs.container-version }}

  release-status:
    needs: ["build"]
    name: Build Images Success
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Any jobs failed?
        if: ${{ contains(needs.*.result, 'failure') }}
        run: exit 1
      - name: All jobs passed or skipped
        if: ${{ !(contains(needs.*.result, 'failure')) }}
        run: echo "All jobs passed or skipped" && echo "${{ toJSON(needs.*.result) }}"
